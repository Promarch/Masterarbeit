Previously: 
- First two and a half weeks mainly network set-up und installing kernel
- Following week mainly first basic movement with python
- Some time was spent to set up the dockerfile
- Following week more advanced movement, like Multiple Waypoints or different cartesion coordinates
- Following week trying out impedance control on python, realising it might be impossible/very difficult, switching to c++
21.05.2024
Wrote a bit of code, mainly copying existing examples. 
Not really much output codewise, but I think I was able to understand quite a lot concerning the example codes. I should hopefully be able to finish my first own code tomorrow. 
22.05.2024
Modified existing code, setting a specific torque to a joint while having the others not move is working. 
Will look at quaternion video, hopefully I can start setting new trajectories tomorrow
23.05. 
Unsurprisingly, I did not look at the quaternion video.
Gutes Gespräch mit Niko, Idee ist, dass man quasi einen controller schreibt der von selbst den Workspace entdeckt. 
Die Terme von Niko waren mehr oder weniger, dass man im Joint Space die Kräfte vorgibt, und da durch die Kinematik einige Redundanzen gegeben sind man im Nullspace Bewegungen vorgeben kann. 
Alternatives Vorgehen ist, dass man einfach eine Viertelkugel abfährt und bei Widerstand einfach die nächste Bahn ansteuert und die gewollte Position abbricht. 
Rest des Tages wurde damit benutzt einen Halbkreis in python zu diskretisieren, damit man diesen morgen in den Roboter einprogrammiert. 

27.05
Vormittag nicht sehr produktiv, bisschen probiert zu überlegen wie ich's machen könnte, bin aber nicht wirklich weit gekommen. 
Nachmittags dann hauptsächlich Roboterdynamik angeschaut. Allgemein muss ich wahrscheinlich meine Roboterprogrammierung über die Jakobimatrizen machen, 
muss mir daher halt auch überlegen wie ich die Geschwindigkeiten im Arbeitsraum definiere damit sich diese sinnvoll auf die gelenkwinkel übersetzen. 
Allgemeine Frage die ich noch habe ist wie sie im Beispiel quasi die Gelenkgeschwindigkeiten berechnen, aber im Anschluss die Gelenkmomente angeben. 
28.05.
Vormittags Videos von Roboterdynamik angeschaut, Nachmittags dann versucht wieder den Roboter zu steuern. 
Gegen Ende hab ich's dann mit der Transformationsmatrix hinbekommen, aber es ist echt noch viel zu tun. 
29.05.
Vormittags damit verbracht rauszufinden wie man am besten einen Halbkreis programmiert, nur um herauszufinden dass es mit meiner Methode sehr schwierig wird.  
Idee: Ich definiere mir eine viertelkugel innerhalb dessen mein roboter sich bewegen darf. 
Sollte sich der Roboter ausserhalb dieser Kugel befinden wird ein fehler auf die gewünschte Geschwindigkeit addiert, damit man wieder zurück zur eigentlichen Kugel kommt. 
Davon abgesehen wird eine Geschwindigkeit im Arbeitsraum vorgegeben und mit der Jacobimatrix in den Gelenkraum projiziert. Wenn die Kraft einen gewissen Schwellwert überschreitet wird die Bewegung in dieser Richtung langsamer und eine zusätzliche Geschwindigkeit wird dazu geschaltet. Sollte die Kraft weitersteigen wird die entgegengesetzte Richtung angesteuert. 
31.05. 
Weitere Ideen:
- Muss ne Anlauf und Auslaufphase einplanen, da sich sonst mein Roboter über nicht kontinuierliche Beschleunigungen beschwert. 
- w_d könnte ein zufälliger Punkt auf der Viertelkugel sein, und die Geschwindigkeit werden dann durch (w_d-w) angepasst. Die Orientierung könnte man auch immer so angeben, dass die x-achse auf den Ursprung der Kugel zeigt. 
- Falls Kraft höher wird, versuchen die Geschwindigkeiten leicht zu modifizieren, wenn Kraft kleiner wird, weiter machen, wenn nicht, andere Richtung einschlagen, Bedingung wäre, dass die Richtung noch immer in Richtung w_d ist. 
Optimierung des vorherigen Punktes: (hier geht's vorerst nur um Geschwindigkeit, kp was ich mit der Positionsdifferenz mache). Die Richtung der Geschwindigkeit wird in einen tangentialen und senkrechten Anteil unterteilt. Der tangentiale Anteil ist proportional zur Kraft, die in die selbe Richtung wirkt. Falls ein hoher wiederstand da ist, wird die Kraft dementsprechend langsamer. Eine Idee könnte sein, dass es ein Minimum an Geschwindigkeit gibt, damit man bei zu hohen Kräften auch die Bewegung abbrechen kann (und dann einen neuen Punkt berechnet). Die senkrechte Geschwindigkeit besteht aus dem Vorzeichen und dem eigentlichen Wert. Ähnlich dem tangentialen Anteil ist die Geschwindigkeit vom senkrechten Anteil proportional zur Kraft in die Richtung, mit dem Unterschied dass wenn die Kraft erreicht ist sich das Vorzeichen ändert und der Roboter in die andere Richtung fährt. Ich wüsste in dem Fall ehrlich gesagt auch nicht wofür ich w_d verwenden würde, da ich die Differenz ja mehr oder weniger in den ganzen bums einbaue. Vielleicht dass der Roboter langsamer wird wenn er in die nähe des Ziels kommt, damit es nicht zu einem brutalen Richtungswechsel kommt wenn ein neues Ziel eingetragen wird. 

06.06
Weitere Idee: 
- Während der if-Schleife nicht dq_d regeln, sonder dq_soll, und dann nach der if_schleife die abrupten geschwindigkeitswechsel abfangen. 
11.06
Niko meinte bei der letzten Besprechung, dass ich nicht unbedingt positionen, sondern eher orientierungen regeln soll, also quasi dass man 60 grad flexion ausprobiert, oder 10 grad torsion. Dazu könnte man über den Nullspace noch die Kraft regeln, so dass sie nicht über 5N kommt. Gerade ist's aber echt schwierig, da ich momentan versuche direkt die Kräfte zu regeln, indem ich die differenz zwischen soll und ist-Zustand mache, die mit nem proportionalfaktor dann über die Jacobimatrix auf die Joint projiziere. Habs gerade ausprobiert, der Roboter ist direkt überdreht und durch zu hohe geschwindigkeit zum stopp gekommen. 

14.06
Heute ging deutlich besser, kraftregelung funktioniert ungefähr, ist aus dem Buch handbook of robotics, kapitel 7. Reines stiffness control, keine Kraftbeschränkung oder so ähnlich. 
Mit dem Gummiband funktioniert es schon relativ gut, als nächstes müsste ich schauen, wie ich Steifigkeiten selektiv einstellen kann damit ich zB in y eine position angebe und es sich einfacher in z-richtung verschieben lässt. 
Im anschluss wäre es noch interessant zu testen, ob es funktioniert rotationen anzugeben. 
Ab da kann's dann Richtung Kniemanipulation gehen, wobei ich hier wahrscheinlich eine bessere Aufhängung brauche, da ich nicht denke dass die jetzige gut mit Rotationen auskommt. Allgemeine Dimensionen stimmen, aber ich müsste die Löcher zum greifen tiefer machen. 

17.06. 
Kraftregelung funktioniert ungefähr, Relative positionen werden angefahre, positionen auch, wobei ich hier immer wieder probleme mit der Torque kontnuität habe. Mögliche Lösung wäre die gesendeten Momente über die letzten 5 Werte zu mitteln, dazu gibt es auch ein Beispiel in LibFranka. Im Moment werden Rotationen noch um den Greifer gemacht, was den Nachteil hat, dass man ein enormes Moment aufbringt da in Realität nicht um den Greifer sondern um das Rotationszentrum im Kniegelenk rotiert wird. 
18.06.
Viel 3D modellierung, Aufhängung für die Marker gemacht, die Löcher für die Halterung am Knie neu dimensioniert, und die spacer am greifarm konstruiert. 
Niko meinte auch, dass eine elegante Lösung für mein Rotationsproblem eine modifizierung der Jakobimatrix wäre, indem man als Position des End-Effektors nicht die greifer nimmt, sondern das Rotationszentrum des Kniegelenks.
19.06.
Großer 3D Druck ist über Nacht fehlgeschlagen, da sich die Rolle verknotet hat und dadurch stecken geblieben ist. Durfte dadurch heute hauptsächlich den Bowdentube entfernen und einen Teil rausschneiden.
Southside, daher wenig gemacht 
Ikom woche, daher nur halbtags da
24.06.
Nur kurz da gewesen, End-Effektor in Libfranka angepasst damit die Rotation ungefähr ums Kniegelenk hin passiert und nicht um die Greifer
25.06.
Neues Script in python um den Verlauf der Momente in den jeweiligen Gelenken zu messen, ForceControl angepasst dass es auch diese Werte ausgibt, dazu auch die Steifigkeit angepasst damit kein controller torque discontinuity aufkommt
Zwischenzeit: Impedanzregler funktioniert zuverlässig, auch rotationen um den simulierten EE funktionieren gut. Neuer Versuch war, den ganzen Bums über eine Kraftregelung zu machen, wobei das eher schlecht funktioniert hat. Als Steuerung ist's ok, aber als Regelung ist es eine Katastrophe da die gemessenen Kräfte viel zu ungenau sind. Hab auch probiert zu schauen, ob man die Kräfte besser messen kann/besser berechnen kann, hab dafür auch ne cpp funktion zum messen und eine python funktion zum auswerten geschrieben, aber es bleibt echt ungenau. Komplett implementiert hab ich's nicht da danach Niko kam mit dem mujoco model, seitdem bin ich da dran. 
08.07
euh viel passiert, seit letztem Donnerstag bin ich dabei den Roboter über Mujoco zu simulieren. Hab's heute hinbekommen die xml-file vom Roboter so anzupassen, dass sie sich quasi identisch zum Roboter verhält. Ansonsten war ich bisher dabei die 
(geschrieben am 12.08, aber recap der letzten Wochen)
Man kann sehr viel auf github finden. Wichtiger Punkt war die Feststellung, dass Operational Space Control auf dem Roboter einfach nicht funktionieren will, ich bekomme unterschiedliche Trägheitsmatrizen im Vergleich zur Simulation. Weiterer Punkt ist, dass die Präzision des Roboters von der Ausrichtung des Arms abhängt. Wenn der die Rotationsachse und Joint 6 übereinstimmen, wird Joint 6 überproportionel stark angesteuert, wodurch eine Positionsungenauigkeit entsteht. Lösung dafür ist ein Nullspace Control, bei dem die Kosten für Joint 6 stark nach oben geschraubt werden. Hat tatsächlich einen messbaren Einfluss, wobei dieser fast vernachlässigbar ist, wir reden hier von wenigen Millimetern, selbst bei sehr hohen Gewichtungen für den Nullspace. 
12.08
Im Moment ist's echt stressig, man kann den Fortschritt der letzten Wochen aber relativ gut auf github nachvollziehen. Hab letzten Freitag das Knie kaputt gemacht, der Kleber um es zu reparieren kommt diesen Freitag. 
Die Woche mach ich daher vorraussichtlich keine Knietests, der Plan ist das Programm so weit zu bekommen, dass es bei [zu großen Kräften/keiner Bewegung/erreichtem Ziel] eine neue Position anfährt. Dafür muss ich mich aber auch um die Entschleunigung kümmern, da ich sonst einen nicht kontinuierlichen Momentenverlauf hab. Anderer Aspekt ist auch, dass nicht direkt nacheinander neue Positionen aufgerufen werden können, weil der Roboter noch nicht die neue Position anfährt. Bin aber gerade positiv gestimmt, dass ich die Woche Fortschritt machen werden. 
13.08
Hab versucht mehrere Rotationen aneinander zu setzen, funktioniert mehr oder weniger gut, ich bekomm leider regelmäßig die Fehlermeldung, dass es einen nicht-kontinuierlichen Momentenverlauf hab. Hab parallel versucht, nicht die Positionsregelung auf null zu setzen und eher die Zielposition anzupassen, da sonst erstmal die Rotation durchgeführt wird, was zu problemen führt. 
Andere Baustelle, bei der ich auch morgen weitermachen will, ist die Darstellung von mehreren Rotationen in python. Hab hier aber das große Problem, dass meine Zielrotation in c++ und python im Moment anders berechnet werden, wodurch ich noch den Zusammenhang zwischen Quaternion in c++ und Quaternion in python suche. Muss mir neben der reinen Darstellung insbesondere die Berechnung von Rotationen anschauen. 
30.08.
Heute geht's in Urlaub für ne Woche. 
Die Probleme vom letzten Eintrag konnte ich zum Glück alle lösen. Das Problem der nicht-kontinuierlichen Momente wurde insbesondere Pausen zwischen Ende der Entschleunigung und Anfang einer neuen Position. Große Neuigkeit war zwischenzeitlich auch, dass die gewünschte Orientierung zuverlässig angefahren wurde, anstatt erstmal eine Rotation und dann eine Translation zurück zum Ursprung zu fahren. Ging durch die Libfranka Library, da man da die gewünschte Position bei Libfranka eingeben kann, und Libfranka dann die gewünschte Gelenkposition berechnet. 
Momentanes Problem ist, die bisherigen gemessenen Werte vom Roboter in ein Kniemodell einzufügen. Da gibt's zwei Probleme:
- Ich hab kein Modell. Nikos Modell beinhaltet deutlich mehr Bänder, wodurch sein Kniemodell im Vergleich zu meinem deutlich stabiler ist. Wenn ich die Bänder entferne, die nicht bei mir im physischen Modell sind, wird Nikos Knie ähnlich instabil wie das Modell, was ich erstellt habe (es basiert auch auf Nikos Modell, nur ist es gespiegelt und hat angepasste Bandpositionen). 
- Die Kräfte sind für das Modell deutlich zu hoch und nicht verifiziert. Selbst wenn ich nur die Kraft in z-Richtung auf Nikos Modell spiele kugelt sich das Gelenk aus, und der Femur schwebt unkontrolliert im freien. Selbst die Stiffness auch 2000 zu schrauben ändert da nichts. Gerade bin ich dabei die gemessenen Kräfte anhand einer Kraftmessdose zu verifizieren, und es sieht leider danach aus als würde zumindest die Kraftmessungen (die Momente hab ich bisher nicht angeschaut) relativ präzise sein (Roboter misst an die -9,5N, Kraftmessdose -8,9)
Muss ganz ehrlich sagen, dass ich nicht weiß wie ich hier weitermachen kann. Mal schauen ob der Urlaub die Erleuchtung bringt. 
09.09
Puh Erleuchtung hat es nicht gegeben, neue Erkenntnisse weiß ich nicht. So zum aktuellen Stand: 
Ich kann den Roboter gut und sinnvoll steuern, wenn auch über die Libfranka "Blackbox", bei der Libfranka mir die Gelenkwinkel berechnet anstelle dass ich es über die Jacobi mache. Könnte daran liegen, dass ich die Position kontinuierlich verschiebe, anstatt dass ich ihm nur start- und endposition angebe. Das könnte man sich für iwann später mal anschauen, aber stand jetzt funktioniert es, und es ist wichtiger Fortschritte auf dem eigentlichen Projekt zu machen als herauszufinden wie Libfranka da funktioniert. 
Das deutlich größere Problem ist jetzt, ein sinnvolles Kniemodell zu erstellen. Wie schon im letzten Eintrag beschrieben können weder mein Modell noch Nikos Modell auch nur ansatzweise die Kräfte aushalten, die mein Roboter misst. Dabei ist nicht die Messung des Roboters das Problem, da diese beim letzten Eintrag überprüft wurde. Ab circa 5N in negative z-Richtung springt der Femur aus dem Gelenk, auch wenn die Steifigkeit der Bänder sehr hoch eingestellt ist. Eine letzte Idee wäre, ein CT von meinem aktuellen künstlichen Knie zu machen. Dabei erhoffe ich mir weniger, dass ich ein funktionierendes Modell gewinne, als dass ich endgültig beweisen kann, dass ich mit Mujoco kein sinvolles Modell herbekomme. 
Parallel dazu wäre es sinnvoll, meine Masterarbeit zu tippen, wobei das gerade ein bisschen weniger starke Priorität hat. 
10.09
Neue Idee, erstmal langsam rantasten und ein einfaches Kugelgelenk mit dem 3D Drucker fertigen. Weitere Idee ist, die Kraftmessdose anstatt der normalen Kraftsensoren zu verwenden, da die bisherigen Daten jetzt nicht schlecht sind, aber die Masse vom Roboter nicht genug kompensieren
Daher heute Zeit mit Solidworks verbracht, einerseits um das Kugelgelenk zu basteln (als Kugel wird ein Golfball verwendet), andererseits um eine Verbindung zwischen dem Roboter und der Kraftmessdose herzustellen. Stand jetzt sind die ersten Entwürfe durch, ich lass das Mal über Nacht laufen und schau mir morgen an wie die Ergebnisse sind. 
Nächster Schritt ist das Modell in Mujoco zu aktualisieren und die neuen Trägheitsmatrizen/Gewichte in der Franka Emika Oberfläche einzustellen. Wenn der ganze Spaß dann stimmt kann ich den Sensor wieder montieren und mit dem Kugelgelenk anfangen. 
13.09 (Freitag)
Gute Fortschritte gemacht, die Kraftmessdose ist verbunden, und die Messwerte werden auch schon im code ausgelesen mithilfe der treiber von Botasystems. 
Kugelgelenk ist gedruckt, am Montag verbind ich das Gelenk mit dem Unterteil und fahr die ersten tests. Davon abgesehen werden die Sensorwerte schon automatisch ausgelesen und auch in eine Textfile geschrieben wie alle anderen Werte auch, daher kann ich schon gut vergleichsplots erstellen. Anmerkung hier: da die Seile nicht elastisch sind wird das Gelenk vorerst quasi keinen Bewegungsfreiraum haben. 
16.09
Ersten Tracker gedruckt, in meinen Augen sieht der gut aus, ich muss aber noch schauen wie ich das Gewinde sinnvoll schneiden kann, damit die Kugeln draufpassen, gerade rutschen die Kugeln teilweise direkt drauf weil das Gewinde zu klein ist. 
Hab jetzt auch den EE in der Interface so eingestellt, dass die Koordinaten vom Endeffektor mit den Koordinaten vom Sensor übereinstimmen. Der erste Test mit dem Kugelgelenk ist gemacht, hab statt seilen ein Gummiband verwendet, die Daten sehen zumindest vielversprechend aus. 
Nächste Schritte: 
- Mujoco Simulation vom Kugelgelenk erstellen
- Zweiten Tracker drucken, davor muss ich aber mit Niko besprechen ob der erste in Ordnung ist. 
17.09
Muss die Tracker ein bisschen größer machen, aber das muss erst Ende dieser Woche fertig sein
Simulation mit Kugelgelenk ist erstellt, wobei ich noch große Schwierigkeiten mit meinem eigentlichen Gelenk hab. Ist der übliche Spaß dass ein Gelenk mit seinem Elternbody verbunden ist, ich in dem Fall aber nicht die untere Halbkugel an den Body fixieren kann. Bzw ich hab's probiert, aber es ist keine feste Verbindung. Hab gerade gesehen, dass man mit equality/connect eventuell einen balljoint definieren kann. 
Davon abgesehen heute nichts wirklich anderes gemacht, aber prinzipiell ist zumindest rein geometrisch das modell erstellt, es fehlt halt die Verbindung der oberen mit der unteren halbkugel. Mit den Tendons ist es schon erstellt, aber bei denen hab ich nicht wirklich realistisches verhalten, die obere halbkugel kollidiert mit der Kugel auf nicht normale art und weise (die Kugel schmiegt sich nicht in die Einbuchtung der oberen Halbkugel)
30.09
Boah ist viel passiert. Schnell zu den trackern, inzwischen sind Löcher reingebohrt und ich pack eine Wurmschraube rein, damit die Tracker sinnvoll mit dem Gestell verbunden sind. 
Kugelgelenk an sich ist fertig, aber auch nicht mehr im Betrieb. War gut um ein paar basics zu testen, aber die eigentlichen Werte die man rausbekommt sind nicht counterintuitive. 
Die große Neuigkeit ist, dass ich die Position bzw die Kräfte in echtzeit darstellen kann. Ich hab eine Verbindung zwischen Sensor und Kniegelenk, und kann damit auch recht gut die sachen darstellen. 

01.10
So, jetzt muss mal überlegt werden, wie ich die Masterarbeit strukturiere. Nach dem Gespräch letzte Woche mit Niko ist ein guter Teil meiner Arbeit rausgeflogen, nämlich die Simulation und wahrscheinlich auch die Parameteroptimierung. Dadurch ist auch die eigentlich Idee der Masterarbeit raus, dass man mit dem Roboter ein Knie ausmessen kann und durch eine Simulation feststellen kann ob es passt oder nicht. Was bleibt jetzt übrig? Eigentlich nur noch der robotische Teil :/
Was ist jetzt die Idee des Roboters? Ich hab einen Roboter, der von selbst das Knie ausmessen kann. Im Grunde genommen hab ich den "intelligenten" Teil aus der Arbeit genommen. Anstatt, dass der Roboter selbst analysieren kann, ob das Knie den Anforderungen entspricht, fährt der Roboter einfach nur die Trajektorien ab. Das Denken übernimmt der Anwender. Hierdurch ändert sich aber enorm viel beim Gedanken der MA, da ich nicht mehr ein intelligentes Tool herstelle, sondern einfach nur verbesserte Datenaufnahme verspreche. 
SdT wird daher um alles was Simulationen angeht gekürzt, dafür werd ich das Kapitel über mögliche Messmethoden von Knieparametern erweitern müssen. Im Grundlagenteil kommt nur noch das Kapitel zu Kniegelenkersätzen hin, da werd ich aber Acht geben müssen, dass betont wird, dass der Arzt am Ende die Auswertung macht. Auch der ganze Teil mit KI fliegt, weil ich das nicht mehr behandelt bekomme in der restlichen Zeit. Anmerkung hier, der Ausblick wird dadurch sehr viel einfacher. 



















